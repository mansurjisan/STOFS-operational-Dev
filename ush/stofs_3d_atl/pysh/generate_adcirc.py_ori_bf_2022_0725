'''
Usage: python generate_adcirc.py --input_filename ./outputs/out2d_?.nc --output_dir ./extract/

For example:
python generate_adcirc.py --input_filename ./outputs/out2d_1.nc --output_dir ./extract/
will generate
./extract/schout_adcirc_1.nc, which is in ADCIRC's format
  
'''
import sys
from datetime import datetime, timedelta
from time import time 
import argparse
import copy
import os

import numpy as np
import numpy.ma as ma
from netCDF4 import Dataset

def split_quads(elements=None):  # modified by FY
    '''
    Split quad elements to triangles and append additional elements to element table
    This script can be made much faster by using vector operation instead of the for-loop;
    just append additional elements to the end.
    '''
    if elements is None:
        raise Exception('elements should be a numpy array of (np,4)')
    
    tris = []
    elements=np.ma.masked_values(elements, -1)  # modified by FY
    for ele in elements:
        ele=ele[~ele.mask]
        if len(ele) == 3:
            tris.append([ele[0], ele[1], ele[2]])
        elif len(ele) == 4:
            tris.append([ele[0], ele[1], ele[3]])
            tris.append([ele[1], ele[2], ele[3]])
    return tris

if __name__ == '__main__':
    # ---------------------------
    my_fillvalue = -99999.0  # used for dry nodes and small disturbance on land
    small_disturbance_ocean_mask_val = -88888.0  # used for small disturbance in ocean
    # ---------------------------

    t0=time()

    argparser = argparse.ArgumentParser()
    argparser.add_argument('--input_filename', help='input file in SCHISM format')
    argparser.add_argument('--output_dir')
    args=argparser.parse_args()

    input_filename=args.input_filename
    input_fileindex=os.path.basename(input_filename).replace("_", ".").split(".")[1]  # get the file index only

    output_dir = args.output_dir

    print(f"outputting to {output_dir}")                                                                                                                     
    if not os.path.exists(output_dir):                                                                                                                       
        os.mkdir(output_dir)



    ds=Dataset(input_filename)
    units=ds['time'].units
    base_date=ds['time'].base_date


    #get coordinates/bathymetry
    x=ds['SCHISM_hgrid_node_x'][:]
    y=ds['SCHISM_hgrid_node_y'][:]
    depth=ds['depth'][:]
    NP=depth.shape[0]

    #get elements and split quads into tris
    elements=ds['SCHISM_hgrid_face_nodes'][:,:]
    tris = split_quads(elements)  # modified by FY
    NE=len(tris)
    print(f'NE is {NE}')
    NV=3
    
    #get wetdry nodes
    #wd_nodes=ds['wetdry_node'][:,:]

    #get times
    times=ds['time'][:]
    #print(times)
    ntimes=len(times)

    #get elev 
    elev=ds['elevation'][:,:]
    idxs=np.where(elev > 100000)
    elev[idxs]=my_fillvalue
    #mask dry node
    #wd_node=ds['wetdry_node'][:,:]
    #melev=ma.masked_array(elev, wd_node)

    #maxelevation
    maxelev=np.max(elev,axis=0)
    idxs=np.argmax(elev,axis=0)
    time_maxelev=times[idxs]

    #disturbance
    maxdist=copy.deepcopy(maxelev)
    land_node_idx = depth < 0
    maxdist[land_node_idx]=np.maximum(0, maxelev[land_node_idx]+depth[land_node_idx])

    #set mask for dry nodes
    idry=np.zeros(NP)
    idxs=np.where(maxelev+depth <= 1e-6)
    print(idxs)
    maxelev[idxs]=my_fillvalue

    #set mask for small max disturbance (<0.3 m) on land
    small_dist_idx = maxdist < 0.3
    filled_idx=small_dist_idx*land_node_idx
    maxdist[filled_idx]=my_fillvalue
    #set mask for small max disturbance (<0.3 m) in ocean
    ocean_small_dist_idx=small_dist_idx*(~land_node_idx)
    maxdist[ocean_small_dist_idx]=small_disturbance_ocean_mask_val

    #get wind speed
    uwind=ds['windSpeedX'][:,:] #,0]
    vwind=ds['windSpeedY'][:,:] #,1]
    idxs=np.where(uwind > 100000)
    uwind[idxs]=my_fillvalue
    vwind[idxs]=my_fillvalue

    ds.close()

    with Dataset(f"{output_dir}/schout_adcirc_{input_fileindex}.nc", "w", format="NETCDF4") as fout:
        #dimensions
        fout.createDimension('time', None)
        fout.createDimension('node', NP)
        fout.createDimension('nele', NE)
        fout.createDimension('nvertex', NV)

        #variables
        fout.createVariable('time', 'f8', ('time',))
        fout['time'].long_name="Time"
#       fout['time'].units = f'seconds since {startdate.year}-{startdate.month}-{startdate.day} 00:00:00 UTC'
#       fout['time'].base_date=f'{startdate.year}-{startdate.month}-{startdate.day} 00:00:00 UTC'
        fout['time'].base_date=base_date
        fout['time'].standard_name="time"
        fout['time'].units=units
        fout['time'][:] = times

        fout.createVariable('x', 'f8', ('node',))
        fout['x'].long_name="node x-coordinate"
        fout['x'].standard_name="longitude"
        fout['x'].units="degrees_east"
        fout['x'].positive="east"
        fout['x'][:]=x

        fout.createVariable('y', 'f8', ('node',))
        fout['y'].long_name="node y-coordinate"
        fout['y'].standard_name="latitude"
        fout['y'].units="degrees_north"
        fout['y'].positive="north"
        fout['y'][:]=y

        fout.createVariable('element', 'i', ('nele','nvertex',))
        fout['element'].long_name="element"
        fout['element'].standard_name="face_node_connectivity"
        fout['element'].start_index=1
        fout['element'].units="nondimensional"
        fout['element'][:]=np.array(tris)

        fout.createVariable('depth', 'f8', ('node',))
        fout['depth'].long_name="distance below NAVD88"
        fout['depth'].standard_name="depth below NAVD88"
        fout['depth'].coordinates="time y x"
        fout['depth'].location="node"
        fout['depth'].units="m"
        fout['depth'][:]=depth

        fout.createVariable('zeta_max','f8', ('node',), fill_value=my_fillvalue)
        fout['zeta_max'].standard_name="maximum_sea_surface_height_above_navd88"
        fout['zeta_max'].coordinates="y x"
        fout['zeta_max'].location="node"
        fout['zeta_max'].units="m"
        fout['zeta_max'][:]=maxelev

        fout.createVariable('time_of_zeta_max','f8', ('node',), fill_value=my_fillvalue)
        fout['time_of_zeta_max'].standard_name="time_of_maximum_sea_surface_height_above_navd88"
        fout['time_of_zeta_max'].coordinates="y x"
        fout['time_of_zeta_max'].location="node"
        fout['time_of_zeta_max'].units="sec"
        fout['time_of_zeta_max'][:]=time_maxelev

        fout.createVariable('disturbance_max','f8', ('node',), fill_value=my_fillvalue)
        fout['disturbance_max'].standard_name="maximum_depature_from_initial_condition"
        fout['disturbance_max'].coordinates="y x"
        fout['disturbance_max'].location="node"
        fout['disturbance_max'].units="m"
        fout['disturbance_max'][:]=maxdist

        fout.createVariable('zeta','f8', ('time', 'node',), fill_value=my_fillvalue)
        fout['zeta'].standard_name="sea_surface_height_above_navd88"
        fout['zeta'].coordinates="time y x"
        fout['zeta'].location="node"
        fout['zeta'].units="m"
        fout['zeta'][:,:]=elev

        fout.createVariable('uwind','f8', ('time', 'node',), fill_value=my_fillvalue)
        fout['uwind'].long_name="10m_above_ground/UGRD"
        fout['uwind'].standard_name = "eastward_wind"
        fout['uwind'].coordinates="time y x"
        fout['uwind'].location="node"
        fout['uwind'].units="ms-1"
        fout['uwind'][:,:]=uwind

        fout.createVariable('vwind','f8', ('time', 'node',), fill_value=my_fillvalue)
        fout['vwind'].long_name="10m_above_ground/VGRD"
        fout['vwind'].standard_name = "northward_wind"
        fout['vwind'].coordinates="time y x"
        fout['vwind'].location="node"
        fout['vwind'].units="ms-1"
        fout['vwind'][:,:]=vwind

        fout.title = 'SCHISM Model output'
        fout.source = 'SCHISM model output version v10'
        fout.references = 'http://ccrm.vims.edu/schismweb/'

    print(f'It took {time()-t0} to interpolate')
